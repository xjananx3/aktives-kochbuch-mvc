// <auto-generated />
using System;
using AktivesKochbuch.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AktivesKochbuch.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231022221820_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.12");

            modelBuilder.Entity("AktivesKochbuch.Models.Benutzer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Benutzername")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Benutzer");
                });

            modelBuilder.Entity("AktivesKochbuch.Models.Rezept", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BenutzerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RezeptKategorie")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RezeptTitel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("VorschlagId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Zubereitung")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BenutzerId");

                    b.HasIndex("VorschlagId");

                    b.ToTable("Rezepte");
                });

            modelBuilder.Entity("AktivesKochbuch.Models.Vorschlag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AnzahlVorschläge")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BenutzerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RezeptId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("Wochentag")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BenutzerId");

                    b.ToTable("Vorschläge");
                });

            modelBuilder.Entity("AktivesKochbuch.Models.Rezept", b =>
                {
                    b.HasOne("AktivesKochbuch.Models.Benutzer", "Benutzer")
                        .WithMany("Rezepte")
                        .HasForeignKey("BenutzerId");

                    b.HasOne("AktivesKochbuch.Models.Vorschlag", null)
                        .WithMany("Rezeptvorschläge")
                        .HasForeignKey("VorschlagId");

                    b.Navigation("Benutzer");
                });

            modelBuilder.Entity("AktivesKochbuch.Models.Vorschlag", b =>
                {
                    b.HasOne("AktivesKochbuch.Models.Benutzer", null)
                        .WithMany("RezeptVorschläge")
                        .HasForeignKey("BenutzerId");
                });

            modelBuilder.Entity("AktivesKochbuch.Models.Benutzer", b =>
                {
                    b.Navigation("RezeptVorschläge");

                    b.Navigation("Rezepte");
                });

            modelBuilder.Entity("AktivesKochbuch.Models.Vorschlag", b =>
                {
                    b.Navigation("Rezeptvorschläge");
                });
#pragma warning restore 612, 618
        }
    }
}
